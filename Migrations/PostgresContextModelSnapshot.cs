// <auto-generated />
using System;
using BackendBookstore.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BackendBookstore.Migrations
{
    [DbContext(typeof(PostgresContext))]
    partial class PostgresContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "pg_catalog", "adminpack");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BackendBookstore.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("address_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("AddressId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("city");

                    b.Property<int?>("OrdersId")
                        .HasColumnType("integer")
                        .HasColumnName("orders_id");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("postal_code");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("street");

                    b.HasKey("AddressId")
                        .HasName("address_pkey");

                    b.HasIndex("OrdersId");

                    b.ToTable("address", (string)null);
                });

            modelBuilder.Entity("BackendBookstore.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("book_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("BookId"));

                    b.Property<int>("Available")
                        .HasColumnType("integer")
                        .HasColumnName("available");

                    b.Property<string>("BookAuthor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("book_author");

                    b.Property<decimal>("BookPrice")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("book_price");

                    b.Property<string>("BookTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("book_title");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("publisher");

                    b.Property<DateOnly>("PublishingYear")
                        .HasColumnType("date")
                        .HasColumnName("publishing_year");

                    b.HasKey("BookId")
                        .HasName("book_pkey");

                    b.HasIndex("CategoryId");

                    b.ToTable("book", (string)null);
                });

            modelBuilder.Entity("BackendBookstore.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("category_name");

                    b.HasKey("CategoryId")
                        .HasName("category_pkey");

                    b.ToTable("category", (string)null);
                });

            modelBuilder.Entity("BackendBookstore.Models.Order", b =>
                {
                    b.Property<int>("OrdersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("orders_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("OrdersId"));

                    b.Property<DateOnly?>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("order_date")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Status")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("status");

                    b.Property<string>("StripeTransactionId")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("stripe_transaction_id");

                    b.Property<decimal?>("TotalAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("total_amount");

                    b.Property<int?>("UsersId")
                        .HasColumnType("integer")
                        .HasColumnName("users_id");

                    b.HasKey("OrdersId")
                        .HasName("orders_pkey");

                    b.HasIndex("UsersId");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("BackendBookstore.Models.Orderitem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("order_item_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("OrderItemId"));

                    b.Property<int?>("BookId")
                        .HasColumnType("integer")
                        .HasColumnName("book_id");

                    b.Property<int?>("OrdersId")
                        .HasColumnType("integer")
                        .HasColumnName("orders_id");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasKey("OrderItemId")
                        .HasName("orderitem_pkey");

                    b.HasIndex("BookId");

                    b.HasIndex("OrdersId");

                    b.ToTable("orderitem", (string)null);
                });

            modelBuilder.Entity("BackendBookstore.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("review_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("ReviewId"));

                    b.Property<int?>("BookId")
                        .HasColumnType("integer")
                        .HasColumnName("book_id");

                    b.Property<int>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<DateOnly?>("ReviewDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("review_date")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("UsersId")
                        .HasColumnType("integer")
                        .HasColumnName("users_id");

                    b.HasKey("ReviewId")
                        .HasName("review_pkey");

                    b.HasIndex("BookId");

                    b.HasIndex("UsersId");

                    b.ToTable("review", (string)null);
                });

            modelBuilder.Entity("BackendBookstore.Models.User", b =>
                {
                    b.Property<int>("UsersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("users_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("UsersId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("first_name");

                    b.Property<char?>("Genre")
                        .HasMaxLength(1)
                        .HasColumnType("character(1)")
                        .HasColumnName("genre");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("last_name");

                    b.Property<string>("PasswordLogin")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("password_login");

                    b.Property<string>("Phone")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("phone");

                    b.Property<string>("UserRole")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("user_role")
                        .HasDefaultValueSql("'Customer'::character varying");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("username");

                    b.HasKey("UsersId")
                        .HasName("users_pkey");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("BackendBookstore.Models.Address", b =>
                {
                    b.HasOne("BackendBookstore.Models.Order", "Orders")
                        .WithMany("Addresses")
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("address_orders_id_fkey");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BackendBookstore.Models.Book", b =>
                {
                    b.HasOne("BackendBookstore.Models.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("book_category_id_fkey");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BackendBookstore.Models.Order", b =>
                {
                    b.HasOne("BackendBookstore.Models.User", "Users")
                        .WithMany("Orders")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("orders_users_id_fkey");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("BackendBookstore.Models.Orderitem", b =>
                {
                    b.HasOne("BackendBookstore.Models.Book", "Book")
                        .WithMany("Orderitems")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("orderitem_book_id_fkey");

                    b.HasOne("BackendBookstore.Models.Order", "Orders")
                        .WithMany("Orderitems")
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("orderitem_orders_id_fkey");

                    b.Navigation("Book");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BackendBookstore.Models.Review", b =>
                {
                    b.HasOne("BackendBookstore.Models.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("review_book_id_fkey");

                    b.HasOne("BackendBookstore.Models.User", "Users")
                        .WithMany("Reviews")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("review_users_id_fkey");

                    b.Navigation("Book");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("BackendBookstore.Models.Book", b =>
                {
                    b.Navigation("Orderitems");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("BackendBookstore.Models.Category", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BackendBookstore.Models.Order", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Orderitems");
                });

            modelBuilder.Entity("BackendBookstore.Models.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
